#!/usr/bin/env python

# use this script when running the indexer from cron

import os
import shutil
import logging

from fedoracommunity.search.index import run

try:
    from lockfile import LockFile
except:
    from lockfile import FileLock as LockFile

from optparse import OptionParser

log = logging.getLogger()

if __name__=="__main__":
    parser = OptionParser()
    parser.add_option("-p", "--path", dest="cache_path",
                      default='/var/tmp/fedoracommunity',
                      help="path to where we create the index caches", metavar="CACHEPATH")
    parser.add_option("--icons-dest", dest="icons_dest", default=None,
                      help="directory to move the icons cache when we are done",
                      metavar="ICONSDEST")
    parser.add_option("--index-db-dest", dest="index_db_dest", default=None,
                      help="directory to move the xapian index to when we are done",
                      metavar="INDEXDBDEST")
    parser.add_option("--pagure-url", dest="pagure_url", default=None,
                      help="the base url to get pagure data from",
                      metavar="PAGUREURL")
    parser.add_option("--icons-url", dest="icons_url", default=None,
                      help="the base url to get icons data from",
                      metavar="ICONSURL")
    parser.add_option("--mdapi-url", dest="mdapi_url", default=None,
                      help="the base url to get mdapi data from",
                      metavar="MDAPIURL")
    parser.add_option("--verbose", action="store_true", default=False,
                      help="Verbose output.")
    parser.add_option("--debug", action="store_true", default=False,
                      help="Extra verbose output.")

    (options, args) = parser.parse_args()

    if options.debug:
        logging.basicConfig(level=logging.DEBUG)
    elif options.verbose:
        logging.basicConfig(level=logging.INFO)
    else:
        logging.basicConfig(level=logging.WARN)


    lockfile = LockFile(os.path.join(options.cache_path, '.fcomm_index_lock'))

    try:
        lockfile.acquire(timeout=30)
    except Exception as e:
        print "Error acquiring lock file: %s" % str(e)
        exit(-1)

    try:
        run(cache_path=options.cache_path,
            pagure_url=options.pagure_url,
            icons_url=options.icons_url,
            mdapi_url=options.mdapi_url,
            )

        if options.icons_dest is None:
            log.warn("No icons_dest specified.  Skipping copy.")
        else:
            icon_dir = os.path.join(options.cache_path, 'icons')
            if not os.path.isdir(icon_dir):
                icon_dir = os.path.join(options.cache_path, '..', 'icons')

            for file_name in os.listdir(icon_dir):
                new_file_path = os.path.join(icon_dir, file_name)
                old_file_path = os.path.join(options.icons_dest, file_name)
                if os.path.isfile(old_file_path):
                    log.debug("Removing %s" % old_file_path)
                    os.remove(old_file_path)
                log.info("Writing   %s" % old_file_path)
                shutil.move(new_file_path, old_file_path)

        if options.index_db_dest is None:
            log.warn("No index-db-dest specified.  Skipping final placement.")
        else:
            index_dir = os.path.join(options.cache_path, 'search')

            new_files = {}
            for file_name in os.listdir(index_dir):
                new_file_path = os.path.join(index_dir, file_name)
                old_file_path = os.path.join(options.index_db_dest, 'search', file_name)
                new_files[file_name] = True
                if os.path.isfile(old_file_path):
                    log.debug("Removing %s" % old_file_path)
                    os.remove(old_file_path)
                log.info("Writing   %s" % old_file_path)
                shutil.move(new_file_path, old_file_path)

            # remove any other files in the dest dir
            for file_name in os.listdir(options.index_db_dest):
                if not new_files.get(file_name, False):
                    old_file_path = os.path.join(options.index_db_dest, 'search', file_name)
                    if os.path.isfile(old_file_path):
                        log.info("Removing %s" % old_file_path)
                        os.remove(old_file_path)
    finally:
        lockfile.release()
